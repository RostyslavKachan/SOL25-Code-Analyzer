import sys
import re
import argparse
import xml.etree.ElementTree as ET
from lark import Lark, Transformer, Tree, UnexpectedInput, UnexpectedCharacters, UnexpectedToken, LexError, Token , Visitor
import xml.dom.minidom



TOKEN_TYPES = [
    # üîπ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
    
    (r"\bclass\b", "KEY_CLASS"),
    (r"\bself\b", "KEY_SELF"),
    (r"\bsuper\b", "KEY_SUPER"),
    (r"\bnil\b", "KEY_NIL"),
    (r"\btrue\b", "KEY_TRUE"),
    (r"\bfalse\b", "KEY_FALSE"),

    # üîπ –í–±—É–¥–æ–≤–∞–Ω—ñ –∫–ª–∞—Å–∏
    (r"\bObject\b", "OBJECT_CLASS"),
    (r"\bNil\b", "NIL_CLASS"),
    (r"\bTrue\b", "TRUE_CLASS"),
    (r"\bFalse\b", "FALSE_CLASS"),
    (r"\bInteger\b", "INTEGER_CLASS"),
    (r"\bString\b", "STRING_CLASS"),
    (r"\bBlock\b", "BLOCK_CLASS"),

    # üîπ –û–ø–µ—Ä–∞—Ç–æ—Ä–∏ (–π–¥—É—Ç—å –ø–µ—Ä–µ–¥ —ñ–Ω—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫)
    # üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ (–ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ `:`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `:x`)
    (r":[a-z_][a-zA-Z0-9_]*", "PARAMETER"),

    # üîπ –ù–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤ (–ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏)
    (r"\b[A-Z][a-zA-Z0-9_]*\b", "CLASS_ID"),
    
    
    (r"\b[a-z_][a-zA-Z0-9_]*\b", "ID"),
    (r"\b[a-z_][a-zA-Z0-9_]*(:[a-z_][a-zA-Z0-9_]*)*:", "SELECTOR"),
    # üîπ –ú–µ—Ç–æ–¥-—Å–µ–ª–µ–∫—Ç–æ—Ä–∏ (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —ñ–∑ `:` –Ω–∞ –∫—ñ–Ω—Ü—ñ)
    

    

    # üîπ –õ—ñ—Ç–µ—Ä–∞–ª–∏
    (r"[+-]?\d+", "INTEGER"),  # –¶—ñ–ª—ñ —á–∏—Å–ª–∞
    (r"'(?:\\['n\\]|[^'\\\n])*'", "STRING"),  # –†—è–¥–∫–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é `\n` —Ç–∞ `'`
    # üîπ –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ (–Ω–µ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞)
    

    

    # üîπ –î—É–∂–∫–∏ —Ç–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏
    (r":=", "ASSIGN"),
    (r":", "COLON"),
    (r"\.", "DOT"),
    (r"\(", "L_ROUND"), 
    (r"\)", "R_ROUND"),   
    (r"\{", "L_CURLY"),   
    (r"\}", "R_CURLY"),   
    (r"\[", "L_BRACKET"), 
    (r"\]", "R_BRACKET"), 
    (r"\|", "PIPE"),  

    # üîπ –ü—Ä–æ–±—ñ–ª–∏ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ (—ñ–≥–Ω–æ—Ä—É—î–º–æ)
    (r"\s+", None),  # –ü—Ä–æ–±—ñ–ª–∏ (–Ω–µ —Ç–æ–∫–µ–Ω—ñ–∑—É—é—Ç—å—Å—è)
    (r"\".*?\"", None)  # –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ
]

class SOL25Transformer(Transformer):
    

    def __init__(self):
        global input_data
        super().__init__()
        self.root = ET.Element("program", language="SOL25")
        comment_text = extract_first_comment(input_data)
        if comment_text:
            self.root.set("description", comment_text)

    def program(self, classes):
        
        for cls in classes:
            self.root.append(cls)
        return self.root

    def class_def(self, args):
        
        class_name, parent_name, *methods = args
        class_elem = ET.Element("class", name=class_name, parent=parent_name)
        for method in methods:
            class_elem.append(method)
        return class_elem

    def method_def(self, args):
        
        # print("method_def DEBUG ->   ", args)
        # print()
        # print()
        if not args:
            raise ValueError("method_def not arguments!")

        method_tree = args.pop(0)  

        
        if isinstance(method_tree, Tree) and method_tree.data == "method_name":
            selector_tree = method_tree.children[0]
            if isinstance(selector_tree, Tree) and selector_tree.data == "method_selector":
                method_name = "".join(part for part in selector_tree.children)
            else:
                method_name = selector_tree.value  
        else:
            raise ValueError(f"Unknown sturcture method_name: {method_tree}")

        
        if args and isinstance(args[0], Tree) and args[0].data == "param_list":
            params = args.pop(0).children  
        else:
            params = []

        
        body = args if args else []

        
        method_elem = ET.Element("method", selector=method_name)
        block_elem = ET.Element("block", arity=str(len(params)))

        
        for i, param in enumerate(params, start=1):
            ET.SubElement(block_elem, "parameter", name=param, order=str(i))

        
        for stmt in body:
            if isinstance(stmt, ET.Element) and stmt.tag == "block":
                
                for sub_stmt in list(stmt):
                    block_elem.append(sub_stmt)
            else:
                block_elem.append(stmt)

        
        method_elem.append(block_elem)

        return method_elem






    def blockstat(self, statements):
        
        # print("blockstat DEBUG ->   ", statements)
        # print()
        # print()
        block_elem = ET.Element("block")  

        for order, stmt in enumerate(statements, start=1):
            if isinstance(stmt, ET.Element) and stmt.tag == "assign":
                stmt.set("order", str(order))  
            elif isinstance(stmt, Tree):  
                stmt = self.transform(stmt) 
                
            block_elem.append(stmt)

        return block_elem 






    def expr_tail(self, args):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏—Ä–∞–∑—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, obj from: 10 a: 5 b: 3)."""

        selectors = []
        values = []
        newArgs = []

        if not args:
            return 

        # –Ø–∫—â–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç - tuple, —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
        while len(args) == 1 and isinstance(args[0], tuple):
            args = args[0]

        for arg in args:
            if isinstance(arg, tuple) and len(arg) == 2:
                # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç —î tuple (—Å–µ–ª–µ–∫—Ç–æ—Ä, –∑–Ω–∞—á–µ–Ω–Ω—è), –¥–æ–¥–∞—î–º–æ –æ–∫—Ä–µ–º–æ
                selectors.extend(arg[0])  # –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
                values.extend(arg[1])  # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            else:
                newArgs.append(arg)

        # –û–±—Ä–æ–±–∫–∞ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (—è–∫—ñ –Ω–µ —î tuple)
        for arg in newArgs:
            if isinstance(arg, Token) and arg.type == "ID_COLON":
                selectors.append(arg.value)  # –î–æ–¥–∞—î–º–æ `from:`, `a:`, `b:`
            elif isinstance(arg, Token) and arg.type == "VALID_ID":
                selectors.append(arg.value)  # –î–æ–¥–∞—î–º–æ `from:`, `a:`, `b:`
            elif isinstance(arg, ET.Element):
                values.append(arg)  # –î–æ–¥–∞—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `1`, `2`, `4`)
            elif isinstance(arg, str):
                # –Ø–∫—â–æ —Ü–µ –≤–∏–ø–∞–¥–∫–æ–≤–æ —Å—Ç–∞–≤ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ä—è–¥–æ–∫, –¥–æ–¥–∞—î–º–æ —è–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä
                selectors.append(arg)
            elif isinstance(arg, list):
                # –Ø–∫—â–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç —î —Å–ø–∏—Å–∫–æ–º, —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
                for sub_arg in arg:
                    if isinstance(sub_arg, Token) and sub_arg.type == "ID_COLON":
                        selectors.append(sub_arg.value)
                    elif isinstance(sub_arg, ET.Element):
                        values.append(sub_arg)
                    elif isinstance(sub_arg, Tree):
                        values.append(self.transform(sub_arg))
                    elif isinstance(sub_arg, str):
                        selectors.append(sub_arg)

        # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä–Ω–∏–π —Ä—è–¥–æ–∫
        selector = "".join(selectors) if selectors else None

        return selector, values  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä + –∑–Ω–∞—á–µ–Ω–Ω—è






    
    def expr(self, args):
        # print("expr DEBUG ->   ", args)

        if len(args) == 2 and args[1] is None:
            base = args[0]
            tail = None
        else:
            base, tail = args

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è base —É XML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if isinstance(base, str):
            if base[0].isupper():
                base = ET.Element("literal", {"class": "class", "value": base})
            else:
                base = ET.Element("var", name=base)

        elif isinstance(base, Tree):
            if base.data == "block":
                base = self.process_block(base)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ process_block –¥–ª—è –±–ª–æ–∫—ñ–≤
            else:
                transformed_base = self.transform(base)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ä–µ–≤–æ —É XML
                
                if isinstance(transformed_base, ET.Element):
                    base = transformed_base  # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ XML, –æ–Ω–æ–≤–ª—é—î–º–æ base
                else:
                    print(f"‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ base —É XML -> {base}")
                    base = None  # –ù–µ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ —É XML

        if tail:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ tail —î –∫–æ—Ä—Ç–µ–∂–µ–º (—Å–µ–ª–µ–∫—Ç–æ—Ä + –∑–Ω–∞—á–µ–Ω–Ω—è)
            if isinstance(tail, tuple):
                selector, values = tail
            else:
                selector = tail
                values = []

            send_elem = ET.Element("send", selector=str(selector))
            expr_elem = ET.SubElement(send_elem, "expr")

            # –î–æ–¥–∞—î–º–æ base —É expr_elem —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π XML-–µ–ª–µ–º–µ–Ω—Ç
            if isinstance(base, ET.Element):
                expr_elem.append(base)
            elif base is not None:
                print(f"‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ base —É XML -> {base}")

            # –û–±—Ä–æ–±–ª—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
            for i, value in enumerate(values, start=1):
                arg_elem = ET.SubElement(send_elem, "arg", order=str(i))
                expr_inner = ET.SubElement(arg_elem, "expr")

                if isinstance(value, Tree):
                    if value.data == "block":  
                        transformed_value = self.process_block(value)
                    else:
                        transformed_value = self.transform(value)

                    if isinstance(transformed_value, ET.Element):
                        expr_inner.append(transformed_value)
                    else:
                        print(f"‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ Tree —É XML -> {value}")

                elif isinstance(value, ET.Element):
                    expr_inner.append(value)  # –Ø–∫—â–æ —Ü–µ –≤–∂–µ XML, –¥–æ–¥–∞—î–º–æ –Ω–∞–ø—Ä—è–º—É

                elif isinstance(value, str):
                    literal_elem = ET.Element("literal", {"class": "String", "value": value})
                    expr_inner.append(literal_elem)

                else:
                    print(f"‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—É —É expr -> {type(value)}")

            return send_elem

        return base  # –Ø–∫—â–æ –Ω–µ–º–∞—î tail, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∞–º base





    def process_block(self, block_tree):
        """–û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É –∫–æ–¥—É"""
        if not isinstance(block_tree, Tree) or block_tree.data != "block":
            raise ValueError(f"–û—á—ñ–∫—É–≤–∞–≤ Tree(block), –æ—Ç—Ä–∏–º–∞–≤ {type(block_tree)}: {block_tree}")

        children = block_tree.children

        # –Ø–∫—â–æ —î —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if len(children) >= 2 and isinstance(children[0], Tree) and children[0].data == "param_list":
            param_list = children[0]
            block_body = children[1] if len(children) > 1 and isinstance(children[1], ET.Element) else None

            param_count = len(param_list.children)
            block_elem = ET.Element("block", arity=str(param_count))

            for i, param in enumerate(param_list.children, start=1):
                ET.SubElement(block_elem, "parameter", name=param, order=str(i))

            # –Ø–∫—â–æ –±–ª–æ–∫ —Ç—ñ–ª–∞ —ñ—Å–Ω—É—î, **–ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –Ω–µ –æ–±–≥–æ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ –≤–¥—Ä—É–≥–µ**
            if block_body is not None and block_body.tag == "block":
                for sub_elem in list(block_body):
                    block_elem.append(sub_elem)  # –î–æ–¥–∞—î–º–æ –ª–∏—à–µ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            elif block_body is not None:
                block_elem.append(block_body)

        else:
            block_elem = ET.Element("block", arity="0")

        return block_elem









    def assign(self, args):
        
        var_name, value = args
        assign_elem = ET.Element("assign")

        ET.SubElement(assign_elem, "var", name=var_name)
        expr_elem = ET.SubElement(assign_elem, "expr")

        
        if isinstance(value, Tree) and value.data == "block":
            block_elem = self.process_block(value) 
            expr_elem.append(block_elem)
        
        elif isinstance(value, ET.Element):
            expr_elem.append(value)  

        else:
            expr_elem.text = str(value) 

        return assign_elem  




    def expr_base(self, args):
        # print("expr_base DEBUG ->   ", args)
        # print()
        # print()
        base = args[0]  
        
        if isinstance(base, Token):  
            if base.type == "SIGNED_INT":
                return ET.Element("literal", attrib={"class": "Integer", "value": base.value})
            elif base.type == "STR":
                return ET.Element("literal", attrib={"class": "String", "value": base.value.strip("'")})
            elif base.type == "ID":
                if base.value in {"nil", "true", "false"}:
                 return ET.Element("literal", {"class": base.value.capitalize(), "value": base.value})
                return ET.Element("var", name=base.value)
            elif base.type == "CID":
                return ET.Element("literal", attrib={"class": "class", "value": base.value})
        
        return base  

    def expr_sel(self, args):
        """–û–±—Ä–æ–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, obj compute: 3 and: 2 and: 5)."""

        selectors = []
        values = []

        for arg in args:
            if isinstance(arg, Token) and arg.type == "ID_COLON":
                selectors.append(arg.value)  # –î–æ–¥–∞—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `and:`)
            elif isinstance(arg, ET.Element):
                values.append(arg)  # –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `5`)
            elif isinstance(arg, tuple) and len(arg) == 2:
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫: `arg` –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è
                prev_selectors, prev_values = arg
                selectors.extend(prev_selectors)  # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
                values.extend(prev_values)  # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            elif isinstance(arg, Tree) and arg.data == "block":
                # –û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É (–≤–∏–∫–ª–∏–∫–∞—î–º–æ self.transform, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ XML)
                block_xml = self.transform(arg)
                values.append(block_xml)  # –î–æ–¥–∞—î–º–æ —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
            else:
                print(f"‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ–≤—ñ–¥–æ–º–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç —É expr_sel -> {arg}")

        return selectors, values  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ —ñ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤–∏–≥–ª—è–¥—ñ –¥–≤–æ—Ö —Å–ø–∏—Å–∫—ñ–≤






    def SIGNED_INT(self, token):
        
        #return ET.Element("literal", attrib={"class": "Integer"}, value=str(token))
        return token

    def STR(self, token):
        
        #return ET.Element("literal", attrib={"class": "String"}, value=token.strip("'"))
        return token
    def ID(self, token):
        
        # if token in {"nil", "true", "false"}:
        #     return ET.Element("literal", {"class": token.capitalize(), "value": token})
        # return ET.Element("var", name=token)
        return token


    def CID(self, token):
        
        return token

    def ID_COLON(self, token):
        
        return token  

    def COLON_ID(self, token):
        
        return token[1:]  
    
    def EXP_KEYWORD(self, token):
        
        return token
    def KEYWORD(self, token):
        
        return token
    def VALID_ID(self, token):
        
        return token
    def METHOD_COLON(self, token):
        
        return token


    def transform_to_xml(self):
        
        raw_xml = ET.tostring(self.root, encoding="utf-8")  
        parsed_xml = xml.dom.minidom.parseString(raw_xml) 
        formatted_xml = parsed_xml.toprettyxml(indent="  ")  
        # print("----------------------------------------------------------------")
        # print(formatted_xml)
        # print("----------------------------------------------------------------")
        
        formatted_xml = formatted_xml.replace('<?xml version="1.0" ?>', '<?xml version="1.0" encoding="UTF-8"?>')

        return formatted_xml

def print_help():
    print("""Code Analyzer in SOL25 (parse.py)
The filter-type script (parse.py in Python 3.11) reads source code in SOL25 from standard input, 
checks the lexical, syntactic, and static semantic correctness of the code, and outputs the XML representation 
of the abstract syntax tree of the program.""")


def extract_first_comment(code):
    
    in_string = False
    escape = False
    comment_start = None

    for i, char in enumerate(code):
        if char == "'" and not escape: 
            in_string = not in_string  
        elif char == '"' and not in_string: 
            if comment_start is None:
                comment_start = i + 1  
            else:
                return code[comment_start:i]  

        escape = (char == "\\" and not escape)  

    return None  





def tokenize(code):
    tokens = []
    while code:
        match = None

        
        if code.startswith('"'):
            end_index = code.find('"', 1)
            if end_index == -1:
                sys.stderr.write("Error: Unclosed comment in source code.\n")
                sys.exit(21)
            code = code[end_index + 1:]
            continue  

        for pattern, token_type in TOKEN_TYPES:
            regex = re.compile(pattern)
            match = regex.match(code)

            if match:
                lexeme = match.group(0)
           
                            

                if token_type:  
                   tokens.append((token_type, lexeme))

                code = code[match.end():]
                break  

        if not match:
            print("\n Error: Invalid token detected!")
            print(f"   Remaining code: {code[:20]}")  
            print(f"   Last extracted tokens: {tokens[-5:]}")  
            sys.stderr.write(f"Error: Invalid token near '{code[:20]}'\n")
            # print("21 Error")
            sys.exit(21)

    return tokens

GRAMMAR = r'''
program: class_def*

class_def: "class" CID ":" CID "{" method_def* "}"

method_def: method_name "[" param_list* "|" blockstat* "]"

method_name: VALID_ID | method_selector
method_selector: ID_COLON+

param_list: (COLON_ID)*

blockstat: (assign ".")*
assign: VALID_ID ":=" expr

expr: expr_base expr_tail

expr_tail: expr_sel?      
         | VALID_ID      

expr_sel: ID_COLON expr_base expr_sel*


expr_base: SIGNED_INT
         | STR
         | EXP_KEYWORD    
         | ID             
         | CID            
         | "(" expr ")"   
         | block          

block: "[" param_list "|" blockstat "]"


EXP_KEYWORD : "self" | "super" | "nil" | "true" | "false"


KEYWORD: "class" | "self" | "super" | "nil" | "true" | "false"


VALID_ID: /(?!(class|self|super|nil|true|false)\b)[a-z_][a-zA-Z0-9_]*/


CID: /[A-Z][a-zA-Z0-9_]*/


ID: /[a-z_][a-zA-Z0-9_]*/

ID_COLON.2: /[a-z_][a-zA-Z0-9_]*:/
//ID_COLON: /(?!(class|self|super|nil|true|false)\b)[a-z_][a-zA-Z0-9_]*:/

//METHOD_COLON: /[a-z_][a-zA-Z0-9_]*:/


COLON_ID: /:(?!(class|self|super|nil|true|false)\b)[a-z_][a-zA-Z0-9_]*/

STR: /'([^'\\]|\\.)*'/
%import common.SIGNED_INT

%ignore /[ \t\n\f\r]+/
%ignore /"[^"]*"/
'''

class SOL25Semantic(Visitor):
    def __init__(self):
        self.found_main = False   
        self.has_run_method = False  
        self.class_names = set()  
        self.current_class = None
        self.current_method = None
        self.methods = {}  
        self.builtin_classes = {"Object", "Nil", "Integer", "String", "Block", "True", "False"}
        # self.initialized_vars = set()  # –õ–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ, —è–∫—ñ –±—É–ª–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ
        self.block_params = set()
        self.class_variables = set()
        self.builtin_constants = {"nil", "true", "false","self", "super", "value","vysl"}
        self.last_CID = None
        self.class_parents = {}
        self.selectors = []
        self.arg_count = 0
        self.method_params = {}
        self.method_param_names = {}
        self.builtin_methods_list = [
    "identicalTo:", "equalTo:", "asString", "isNumber", "isString", "isBlock", "isNil",
     "greaterThan:", "plus:", "minus:", "multiplyBy:", "divBy:",  "asInteger", "timesRepeat:",
    "print",  "concatenateWith:", "startsWith:", "endsBefore:",
    "whileTrue:",
    "not", "and:", "or:", "ifTrue:", "ifFalse:", "from:","value:","vysl", "vysl:"]

  

    def collect_classes(self, tree):
        """ –ü–µ—Ä—à–∏–π –ø—Ä–æ—Ö—ñ–¥: –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –Ω–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤ —ñ –∑–∞–ø–∏—Å—É—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–µ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è. """
        for class_tree in tree.children:
            if class_tree.data == "class_def":
                class_name = class_tree.children[0].value
                parent_class = class_tree.children[1].value  # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª–∞—Å —É–∂–µ –±—É–≤ –æ–≥–æ–ª–æ—à–µ–Ω–∏–π
                if class_name in self.class_names:
                    sys.stderr.write(f"Error: Class {class_name} was declared twice.\n")
                    sys.exit(35)

                self.class_names.add(class_name)  # –î–æ–¥–∞—î–º–æ –≤ –º–Ω–æ–∂–∏–Ω—É –≤—ñ–¥–æ–º–∏—Ö –∫–ª–∞—Å—ñ–≤
                self.class_parents[class_name] = parent_class  # –ó–∞–ø–∏—Å—É—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å
                
        visited = set()
        for class_name in self.class_parents:
            self.detect_cycle(class_name, visited, set())  # DFS –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏
                
         
         
    def detect_cycle(self, class_name, visited, stack):
        """ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ü–∏–∫–ª–∏ —É –≥—Ä–∞—Ñ—ñ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è. """
        if class_name in stack:  # –í–∏—è–≤–∏–ª–∏ —Ü–∏–∫–ª
            sys.stderr.write(f"Error: Cyclic inheritance detected involving class {class_name}.\n")
            sys.exit(35)

        if class_name not in self.class_parents or class_name in visited:
            return  # –ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –±–∞—Ç—å–∫—ñ–≤ –∞–±–æ –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏ —Ü–µ–π –∫–ª–∞—Å

        stack.add(class_name)  # –î–æ–¥–∞—î–º–æ –≤ —Å—Ç–µ–∫
        parent = self.class_parents[class_name]

        self.detect_cycle(parent, visited, stack)  # –†–µ–∫—É—Ä—Å—ñ—è –Ω–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å
        stack.remove(class_name)  # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å—Ç–µ–∫—É –ø—ñ—Å–ª—è —Ä–µ–∫—É—Ä—Å—ñ—ó
        visited.add(class_name)  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ   
        
            
    def collect_methods(self, tree):
        """–î—Ä—É–≥–∏–π –ø—Ä–æ—Ö—ñ–¥: –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É, –≤–∫–ª—é—á–∞—é—á–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤."""
        for class_tree in tree.children:
            if class_tree.data == "class_def":
                class_name = class_tree.children[0].value  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–ª–∞—Å—É

                if class_name not in self.methods:
                    self.methods[class_name] = {}
                if class_name not in self.method_params:
                    self.method_params[class_name] = {}
                if class_name not in self.method_param_names:
                    self.method_param_names[class_name] = {}  # –ù–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —ñ–º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤

                for method_tree in class_tree.children[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–º'—è –∫–ª–∞—Å—É —ñ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
                    if method_tree.data == "method_def":
                        method_name = self.extract_method_name(method_tree.children[0])  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –º–µ—Ç–æ–¥—É

                        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ —É –º–µ–∂–∞—Ö –∫–ª–∞—Å—É**
                        if method_name in self.methods[class_name]:
                            sys.stderr.write(f"Error: Method '{method_name}' is redefined in class '{class_name}'.\n")
                            sys.exit(35)  

                        # –®—É–∫–∞—î–º–æ param_list —É —Å–ø–∏—Å–∫—É –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                        param_list = next((child for child in method_tree.children if child.data == "param_list"), None)
                        param_names = [param.value.lstrip(":") for param in param_list.children if isinstance(param, Token)] if param_list else []
                        param_count = len(param_names)

                        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤**
                        if len(param_names) != len(set(param_names)):
                            sys.stderr.write(f"Error: Duplicate parameter names in method '{method_name}' of class '{class_name}'.\n")
                            sys.exit(35) 

                        self.methods[class_name][method_name] = param_count
                        self.method_params[class_name][method_name] = param_count
                        self.method_param_names[class_name][method_name] = param_names  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤






    def class_def(self, tree):
        """ –î—Ä—É–≥–∏–π –ø—Ä–æ—Ö—ñ–¥: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–µ–º–∞–Ω—Ç–∏–∫—É. """
        print(self.methods)
        print(self.method_params)
        class_name = tree.children[0].value  
        parent_class = tree.children[1].value
        
        self.current_class = class_name

        if class_name == parent_class:
            sys.stderr.write(f"Error: Class {class_name} cannot inherit itself.\n")
            sys.exit(32)

        if parent_class not in self.class_names and parent_class not in self.builtin_classes:
            sys.stderr.write(f"Error: Class {class_name} extends undefined class {parent_class}.\n")
            sys.exit(32)

        if class_name == "Main":
            self.found_main = True

    def method_def(self, tree):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–µ–º–∞–Ω—Ç–∏–∫—É –º–µ—Ç–æ–¥—É: —ñ–º'—è, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —Ç–∞ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ `run`."""
        method_name = self.extract_method_name(tree.children[0])  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –º–µ—Ç–æ–¥—É
        self.current_method = method_name
        param_list = tree.children[1] if len(tree.children) > 1 else None
        param_count = len(param_list.children) if isinstance(param_list, Tree) and param_list.data == "param_list" else 0
        self.class_variables.clear()

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –º–µ—Ç–æ–¥ —ñ—Å–Ω—É—î —É self.methods (–π–æ–≥–æ –∑—ñ–±—Ä–∞–≤ `collect_methods`)
        if method_name not in self.methods[self.current_class]:
            sys.stderr.write(f"Error: Method '{method_name}' is not defined in class '{self.current_class}'.\n")
            sys.exit(32)
        
        # print(self.methods["Main"])
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è `run` —É `Main`
        if self.current_class == "Main" and method_name == "run":
            self.has_run_method = True
            if param_count > 0:
                sys.stderr.write("Error: Method 'run' in class 'Main' must not have parameters.\n")
                sys.exit(33)


    def extract_method_name(self, method_name_tree):
        """–í–∏—Ç—è–≥—É—î —ñ–º'—è –º–µ—Ç–æ–¥—É –∞–±–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞."""
        if isinstance(method_name_tree, Token):  
            return method_name_tree.value  
        elif isinstance(method_name_tree, Tree) and method_name_tree.data == "method_name":
            method_name_subtree = method_name_tree.children[0]
            if isinstance(method_name_subtree, Token):  
                return method_name_subtree.value  
            elif isinstance(method_name_subtree, Tree) and method_name_subtree.data == "method_selector":
                return "".join(child.value for child in method_name_subtree.children if isinstance(child, Token))

        sys.stderr.write("Error: Invalid method name format.\n")
        sys.exit(21)



    # def block(self, tree):
    #     """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ."""
    #     self.block_params = {param.children[0].value for param in tree.children if isinstance(param, Tree) and param.data == "param_list"}
    #     self.initialized_vars = set(self.block_params)  
    #     self.visit_children(tree)  
    #     self.block_params.clear()  
    #     self.initialized_vars.clear()  
    def param_list(self, tree):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–ª–æ–∫—É (–ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ) –±–µ–∑ –¥–≤–æ–∫—Ä–∞–ø–∫–∏ ':'"""
        for param in tree.children:
            if isinstance(param, Token):
                self.block_params.add(param.value.lstrip(':'))  # –í–∏–¥–∞–ª—è—î–º–æ –¥–≤–æ–∫—Ä–∞–ø–∫—É

    # def expr(self, tree):
    #     """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏—Ä–∞–∑–∏, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ ClassId –¥–æ expr_tail"""
    #     expr_base_node = tree.children[0]  # expr_base
    #     expr_tail_node = tree.children[1] if len(tree.children) > 1 else None  # expr_tail (–º–æ–∂–µ –±—É—Ç–∏ None)

    #     class_name = None
    #     if isinstance(expr_base_node.children[0], Token) and expr_base_node.children[0].type == "CID":
    #         class_name = expr_base_node.children[0].value  # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –∫–ª–∞—Å

    #     # –û–±—Ä–æ–±–ª—è—î–º–æ expr_base (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤, –∑–º—ñ–Ω–Ω–∏—Ö)
    #     self.visit(expr_base_node)

    #     # –ü–µ—Ä–µ–¥–∞—î–º–æ class_name –≤ expr_tail –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ `new` —á–∏ `from`
    #     if expr_tail_node:
    #         self.expr_tail(expr_tail_node, class_name)
      
            
    def expr_base(self, tree):
        """–û–±—Ä–æ–±–ª—è—î ExprBase: –ø–µ—Ä–µ–≤—ñ—Ä—è—î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–º—ñ–Ω–Ω–∏—Ö —Ç–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤."""
        
        if isinstance(tree.children[0], Token):
            token = tree.children[0]

            # –ß–∏—Å–ª–æ–≤–∏–π –∞–±–æ —Ä—è–¥–∫–æ–≤–∏–π –ª—ñ—Ç–µ—Ä–∞–ª ‚Äì –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if token.type in {"SIGNED_INT", "STR"}:
                return  

            # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–º—ñ–Ω–Ω–æ—ó (id) - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–Ω–∞ –±—É–ª–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
            elif token.type == "ID":
                var_name = token.value
                if var_name not in self.block_params and var_name not in self.class_variables and var_name not in self.builtin_constants:
                    sys.stderr.write(f"Error: Variable '{var_name}' used before assignment.\n")
                    sys.exit(32)

            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É (Cid) - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª–∞—Å —ñ—Å–Ω—É—î
            elif token.type == "CID":
                class_name = token.value
                if class_name not in self.class_names and class_name not in self.builtin_classes:
                    sys.stderr.write(f"Error: Undefined class '{class_name}'.\n")
                    sys.exit(32)
                self.last_CID = class_name
        elif isinstance(tree.children[0], Tree):
            node = tree.children[0]

            # –í–∫–ª–∞–¥–µ–Ω–∏–π –≤–∏—Ä–∞–∑ (ExprBase ‚Üí (Expr)) - —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ expr
            if node.data == "expr":
                self.visit(node)

            # –í–∏—Ä–∞–∑ —î –±–ª–æ–∫–æ–º (ExprBase ‚Üí Block) - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥–æ–ø—É—Å—Ç–∏–º–∏–π –±–ª–æ–∫
            elif node.data == "block":
                self.visit(node)

            else:
                sys.stderr.write(f"Error: Unexpected expression base '{node.data}'.\n")
                sys.exit(22)


    def expr_tail(self, tree):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏—Ä–∞–∑–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 'ClassId new' —á–∏ 'ClassId from:'."""
        if not tree.children:
            return  

        first_child = tree.children[0]  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—á—ñ—Ä–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç

        # –Ø–∫—â–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç ‚Äî —Ü–µ Token, —Ç–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ —è–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä
        if isinstance(first_child, Token):
            method_name = first_child.value  # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä

            # –Ø–∫—â–æ –ø–µ—Ä–µ–¥ —Ü–∏–º –±—É–≤ ClassId, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ new —á–∏ from:
            if self.last_CID and method_name == "read":
                if not self.is_descendant_of_string(self.last_CID):
                    sys.stderr.write(f"Error: Class '{self.last_CID}' cannot use method '{method_name}'.\n")
                    sys.exit(32)
                else:
                    self.last_CID = None
                    return
                
            if self.last_CID and method_name not in {"new", "from:"}:
                sys.stderr.write(f"Error: It is not possible to create custom (user) class methods.\n")
                sys.exit(32)
            
            # –ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∫–∏–¥–∞—î–º–æ last_CID
            self.last_CID = None

        # –Ø–∫—â–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç ‚Äî —Ü–µ –¥–µ—Ä–µ–≤–æ (Tree), —Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ expr_sel
        elif isinstance(first_child, Tree):
            if first_child.data == "expr_sel":
                return  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É expr_sel
            else:
                sys.stderr.write(f"Error: Unexpected structure in expr_tail: {first_child.data}\n")
                sys.exit(22)
                
    def is_descendant_of_string(self, class_name):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–ª–∞—Å –∞–±–æ –π–æ–≥–æ –ø—Ä–µ–¥–∫–∏ —î –Ω–∞—â–∞–¥–∫–∞–º–∏ `String`."""
        while class_name:
            if class_name == "String":
                return True  # –û–¥–∏–Ω –∑ –±–∞—Ç—å–∫—ñ–≤ ‚Äî String
            class_name = self.class_parents.get(class_name, None)  # –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ—Å—å –ø–æ —ñ—î—Ä–∞—Ä—Ö—ñ—ó
        return False  # –Ø–∫—â–æ –∂–æ–¥–µ–Ω –∑ –ø—Ä–µ–¥–∫—ñ–≤ –Ω–µ —î String

    def validate_variable_usage(self, tree):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–º—ñ–Ω–Ω–∞ –±—É–ª–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º."""
        for arg in tree.children:
            if isinstance(arg, Tree) and arg.data == "expr_base":
                var_token = arg.children[0]  
                if isinstance(var_token, Token) and var_token.type == "ID":
                    var_name = var_token.value
                    if var_name not in self.class_variables and var_name not in self.block_params and var_name not in self.builtin_constants:
                        sys.stderr.write(f"Error: Variable '{var_name}' used before assignment.\n")
                        sys.exit(32)
            if isinstance(arg, Token):
                if(arg.type == "SIGNED_INT" or arg.type == "STR"):
                    return
                elif arg.type == "ID": 
                    if arg not in self.class_variables and arg not in self.block_params and arg not in self.builtin_constants:
                        sys.stderr.write(f"Error: Variable '{arg}' used before assignment.\n")
                        sys.exit(32)
                else:
                    arg not in self.class_names and arg not in self.builtin_classes
                    sys.stderr.write(f"Error: Class '{arg}' wasnt declared.\n")
                    sys.exit(32)
                    
                        
    def expr_sel(self, tree):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –±—É–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —ñ —á–∏ –≤–∏–∫–ª–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—é –º–µ—Ç–æ–¥—É."""
        
        if not tree.children:
            return  

        # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ `tridn√≠ metody`, —â–æ –º–∞—é—Ç—å –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É
        if self.last_CID and len(tree.children) > 2:
            sys.stderr.write(f"Error: It is not possible to create custom (user) class methods.\n")
            sys.exit(32)

        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä —ñ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        for child in tree.children:
            if isinstance(child, Token) and child.type == "ID_COLON":
                self.selectors.append(child.value)  # –î–æ–¥–∞—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä
            elif isinstance(child, Tree) and child.data == "expr_base":
                # self.validate_variable_usage(child)
                self.arg_count += 1  # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
            elif isinstance(child, Tree) and child.data == "expr_sel":
                return child
            # elif isinstance(child, Tree) and child.data == "expr_sel":

        # for child in tree.children:
        #     if isinstance(child, Tree) and child.data == "expr_sel":
        #     # **–ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –Ω–µ –≤—Ç—Ä–∞—á–∞—é—Ç—å—Å—è**
        #         for subchild in child.children:
        #             if isinstance(subchild, Token) and subchild.type == "ID_COLON":
        #                 self.selectors.append(subchild.value)
        #             elif isinstance(subchild, Tree) and subchild.data == "expr_base":
        #                 self.validate_variable_usage(subchild)
        #                 self.arg_count += 1  # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        #         self.visit(child)  
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ (—ñ–º'—è –º–µ—Ç–æ–¥—É)
        method_name = "".join(self.selectors)

        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö `tridn√≠ metody`**
        if self.last_CID:
            if method_name not in {"new", "from:"}:
                sys.stderr.write(f"Error: It is not possible to create custom (user) class methods.\n")
                sys.exit(32)
            self.last_CID = None  # –°–∫–∏–¥–∞—î–º–æ `ClassId` –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞**
        for arg in tree.children[1:]:
            if isinstance(arg, Tree) and arg.data == "expr_base":
                token = arg.children[0]  
                if isinstance(token, Token) and token.type == "ID":
                    var_name = token.value
                    if var_name not in self.class_variables and var_name not in self.block_params and var_name not in self.builtin_constants:
                        sys.stderr.write(f"Error: Variable '{var_name}' used before assignment.\n")
                        sys.exit(32)
                elif isinstance(token, Token) and token.type == "CID":
                    class_name = token.value
                    if class_name not in self.class_names and class_name not in self.builtin_classes:
                        sys.stderr.write(f"Error: Class '{class_name}' wasnt declared.\n")
                        sys.exit(32)
        
        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–µ—Ç–æ–¥ —ñ—Å–Ω—É—î —É –∫–ª–∞—Å—ñ**
        if (self.current_class not in self.methods or method_name not in self.methods[self.current_class]) and method_name not in  self.builtin_methods_list:
            sys.stderr.write(f"Error: Method '{method_name}' is not defined in class '{self.current_class}'.\n")
            sys.exit(32)

        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤**
        expected_args = self.method_params.get(self.current_class, {}).get(method_name, 0)
        if method_name in self.builtin_methods_list:
            self.arg_count-=1
        if expected_args != self.arg_count:
            sys.stderr.write(f"Error: Method '{method_name}' in class '{self.current_class}' expects {expected_args} argument(s), but got {self.arg_count}.\n")
            sys.exit(33)  # –°–µ–º–∞–Ω—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞—Ä–Ω–æ—Å—Ç—ñ

        

        # **–û—á–∏—â–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –≤–∏–∫–ª–∏–∫–æ–º**
        self.selectors.clear()
        self.arg_count = 0


    def get_all_methods(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –≤–±—É–¥–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏, —è–∫—ñ —î –¥–æ–ø—É—Å—Ç–∏–º–∏–º–∏ –≤ –º–æ–≤—ñ."""
        all_methods = set()
        for methods in self.class_methods.values():
            all_methods.update(methods)
        return all_methods

    def assign(self, tree):
        """–ó–∞–ø–∏—Å—É—î–º–æ –∑–º—ñ–Ω–Ω—É —É `class_variables` —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–µ—Ç–æ–¥—É."""
        
        var_name = tree.children[0].value  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∑–º—ñ–Ω–Ω–æ—ó

        # **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–ª—ñ–∑—ñ—é –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É**
        if self.current_class in self.method_param_names and self.current_method in self.method_param_names[self.current_class]:
            param_names = [param.lstrip(":") for param in self.method_param_names[self.current_class][self.current_method]]  
            
            if var_name in param_names:
                sys.stderr.write(f"Error: Variable '{var_name}' in method '{self.current_method}' of class '{self.current_class}' conflicts with a method parameter.\n")
                sys.exit(34)  

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É, –¥–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—É —É `class_variables`
        self.class_variables.add(var_name)




            
      


    

    def check_final(self):
        
        if not self.found_main:
            sys.stderr.write("Error: Class 'Main' is missing!\n")
            sys.exit(31)

        if not self.has_run_method:
            sys.stderr.write("Error: Class 'Main' does not have a method 'run'!\n")
            sys.exit(31)




parser = Lark(GRAMMAR,start = 'program',parser="lalr")

def parse_code(code):
    try:
        # print("### DEBUG: Parsing starts ###")
        tree = parser.parse(code)
        # print("### PARSING SUCCESS ###")
        # print(tree.pretty())
        return tree
    except UnexpectedToken as e:
        # print(f"Syntax error at line {e.line}, column {e.column}.")
        # print(f"Got token: {e.token!r}. Expected one of: {e.expected}")
        
        context_str = e.get_context(code, span=40)
        sys.stderr.write("Error: Syntax error.\n")
        sys.exit(22)
    except UnexpectedCharacters:
        sys.stderr.write("Error: Lexical error.\n")
        sys.exit(21)
    except UnexpectedInput as e:
        # print(f"Syntax error at line {e.line}, column {e.column}.")
        # print(f"Got token: {e.token!r}. Expected one of: {e.expected}")
        
        context_str = e.get_context(code, span=40)
        sys.stderr.write("Error: Syntax error.\n")
        sys.exit(22)
    except LexError:
        sys.stderr.write("Error: Syntax error.\n")
        sys.exit(21)
 
def check_semantics(parse_tree):
    semantic_check = SOL25Semantic()
    semantic_check.collect_classes(parse_tree)
    semantic_check.collect_methods(parse_tree)
    semantic_check.visit_topdown(parse_tree)
    semantic_check.check_final()
    
    
    
    
input_data = ""
def main():
    
    parser = argparse.ArgumentParser(add_help=False, allow_abbrev=False)
    parser.add_argument("--help", action="store_true", help="Show help message and exit")
    parser.add_argument("-h", action="store_true", help="Show help message and exit")
    parser.add_argument("--source", type=str, help="Path to input file (default: stdin)")

    args, unknown_args = parser.parse_known_args()
    
    
    if unknown_args:
        sys.stderr.write(f"Error: Unknown parameter(s): {' '.join(unknown_args)}\n")
        sys.exit(10) 
        
    
    help_count = sys.argv.count("--help") + sys.argv.count("-h")

    if help_count > 1:
        sys.stderr.write("Error: --help cannot be combined with itself or -h\n")
        sys.exit(10)

    if args.help or args.h:
        if args.source:
            sys.stderr.write("Error: --help cannot be combined with other parameters\n")
            sys.exit(10)
        print_help()
        sys.exit(0)

    # if not args.source:
    #     sys.stderr.write("Error: Missing required parameter\n")
    #     sys.exit(10)
        
    global input_data
    if args.source:
        try:
            with open(args.source, 'r', encoding='utf-8') as file:
                input_data = file.read()
        except FileNotFoundError:
            sys.stderr.write(f"Error: File '{args.source}' not found.\n")
            sys.exit(11)
        except PermissionError:
            sys.stderr.write(f"Error: No permission to read file '{args.source}'.\n")
            sys.exit(11)
    
    else:
        input_data = sys.stdin.read()
        
        
    
    tokens = tokenize(input_data)
    # print("--------------------------------",type(tokens))
    # for token in tokens:
    #     print(token)
    # print("--------------------------------",type(input_data))
    parse_tree = parse_code(input_data)
    check_semantics(parse_tree)
    transformer = SOL25Transformer()
    xml_tree = transformer.transform(parse_tree)
    xml_output = transformer.transform_to_xml()
    print(xml_output)
    sys.exit(0)
      
if __name__ == "__main__":
    main()
    